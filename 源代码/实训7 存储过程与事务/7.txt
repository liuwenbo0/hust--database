7.1
use fib;

-- 创建存储过程`sp_fibonacci(in m int)`，向表fibonacci插入斐波拉契数列的前m项，及其对应的斐波拉契数。fibonacci表初始值为一张空表。请保证你的存储过程可以多次运行而不出错。

drop procedure if exists sp_fibonacci;
delimiter $$
create procedure sp_fibonacci(in m int)
begin
######## 请补充代码完成存储过程体 ########
declare a int;
declare b int;
declare i int;
declare tmp int;
set a=0;
set b=1;
set tmp=0;
set i=0;
while i<m do
  if i=0 then insert into fibonacci(n, fibn) values(0,0);
  elseif i=1 then insert into fibonacci(n, fibn) values(1,1);
  else 
    set tmp=a;
    set a=b;
    set b=a+tmp;
    insert into fibonacci(n, fibn) values(i,b);
  end if;
  set i=i+1;
end while;
end $$

delimiter ;

7.2
delimiter $$
create procedure sp_night_shift_arrange(in start_date date, in end_date date)
begin
    declare doctor_sel char(30);
    declare doctor_type int ;
    declare doctor_tmp char(30);
    declare exchange int default(0);
    declare nurse_sel_a char(30);
    declare nurse_sel_b char(30);
    declare cur_date date;
    declare dayofweek varchar(10);
    declare done int DEFAULT FALSE;

    declare doctor_cursor cursor for select e_name, e_type from employee where e_type=1 or e_type=2 order by e_id asc;
    declare nurse_cursor cursor for select e_name from employee where e_type=3 order by e_id asc;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;

    open doctor_cursor;
    open nurse_cursor;

    set cur_date = start_date;
    while cur_date <= end_date do 
    fetch nurse_cursor into nurse_sel_a;
      if done then
      close nurse_cursor;
      open nurse_cursor;
      set done = false;
      fetch nurse_cursor into nurse_sel_a;
      end if;
    fetch nurse_cursor into nurse_sel_b;
      if done then
      close nurse_cursor;
      open nurse_cursor;
      set done = false;
      fetch nurse_cursor into nurse_sel_b;
      end if;
      
    set dayofweek =  DATE_FORMAT(cur_date, '%W');
    if (dayofweek = "Saturday" or dayofweek = "Sunday") 
         then 
            fetch doctor_cursor into doctor_sel,doctor_type;
               if done then
               close doctor_cursor;
               open doctor_cursor;
               set done = false;
               fetch doctor_cursor into doctor_sel,doctor_type;
               end if;
            if doctor_type = 1 
            then set exchange = 1; set doctor_tmp = doctor_sel; fetch doctor_cursor into doctor_sel,doctor_type;
               if done then
               close doctor_cursor;
               open doctor_cursor;
               set done = false;
               fetch doctor_cursor into doctor_sel,doctor_type;
               end if;
            end if;
            insert into night_shift_schedule(n_date ,n_doctor_name, n_nurse1_name, n_nurse2_name) values(cur_date ,doctor_sel, nurse_sel_a ,nurse_sel_b);
    elseif dayofweek = "Monday" and exchange = 1 
         then set exchange = 0; insert into night_shift_schedule(n_date ,n_doctor_name, n_nurse1_name, n_nurse2_name) values(cur_date ,doctor_tmp, nurse_sel_a ,nurse_sel_b);
    else 
        fetch doctor_cursor into doctor_sel,doctor_type;
            if done then
            close doctor_cursor;
            open doctor_cursor;
            set done = false;
            fetch doctor_cursor into doctor_sel,doctor_type;
            end if;
        insert into night_shift_schedule(n_date ,n_doctor_name, n_nurse1_name, n_nurse2_name) values(cur_date ,doctor_sel, nurse_sel_a ,nurse_sel_b);
    end if;

    set cur_date = date_add(cur_date ,INTERVAL 1 DAY);	
   end while;
    close nurse_cursor;
    close doctor_cursor;

end$$
 
delimiter ;

7.3
use finance1;

-- 在金融应用场景数据库中，编程实现一个转账操作的存储过程sp_transfer_balance，实现从一个帐户向另一个帐户转账。
-- 请补充代码完成该过程：
delimiter $$
create procedure sp_transfer(
    IN applicant_id int,      
    IN source_card_id char(30),
    IN receiver_id int, 
    IN dest_card_id char(30),
    IN amount numeric(10,2),
    OUT return_code int)
BEGIN
    declare s_owner int;
    declare d_owner int;
    declare s_balance int;
    declare s_type char(10);
    declare d_type char(10);

    select b_type ,b_c_id ,b_balance into s_type ,s_owner ,s_balance from bank_card where b_number = source_card_id;
    select b_type ,b_c_id into d_type ,d_owner from bank_card where b_number = dest_card_id;

    start transaction;

    update bank_card 
    set b_balance = b_balance - amount where b_number = source_card_id ;
    
    if d_type = "储蓄卡" then
        update bank_card 
        set b_balance = b_balance + amount where b_number = dest_card_id ;
    else 
        update bank_card 
        set b_balance = b_balance - amount where b_number = dest_card_id ;
    end if;

    set return_code = 1;
   
    if s_owner <> applicant_id or d_owner <> receiver_id or s_balance < amount or (s_type = "信用卡" and d_type = "储蓄卡") then 
      begin
        rollback ; 
        set return_code = 0; 
      end ;
    else 
      commit ;
    end if;
END$$
delimiter ;






/*  end  of  your code  */ 

