3.1
-- 1) 查询所有客户的名称、手机号和邮箱信息。查询结果按照客户编号排序。
--    请用一条SQL语句实现该查询：

SELECT
	client.c_name,
	client.c_phone,
	client.c_mail 
FROM
	client 
ORDER BY
	client.c_id


/*  end  of  your code  */
 
3.2
-- 2) 查询客户表(client)中邮箱信息为null的客户的编号、名称、身份证号、手机号。
--    请用一条SQL语句实现该查询：

SELECT
	client.c_id, 
	client.c_name, 
	client.c_id_card, 
	client.c_phone
FROM
	client
WHERE
	client.c_mail is null

/*  end  of  your code  */

3.3
-- 3) 查询既买了保险又买了基金的客户的名称、邮箱和电话。结果依c_id排序
-- 请用一条SQL语句实现该查询：

SELECT
	client.c_name, 
	client.c_mail, 
	client.c_phone
FROM
	client
WHERE
	NOT EXISTS(SELECT DISTINCT property1.pro_type
	FROM property property1
	WHERE property1.pro_type <> 1 AND
	property1.pro_type NOT IN(SELECT DISTINCT property2.pro_type
	FROM 
	  property property2,
		client client2
	WHERE 
	  property2.pro_c_id=client2.c_id AND
	  client2.c_id=client.c_id
		))  # 2 3 减去 选出的用户购买的产品 为空 说明购买了基金和保险
GROUP BY
	client.c_id


/*  end  of  your code  */

3.4
-- 4) 查询办理了储蓄卡的客户名称、手机号、银行卡号。 查询结果结果依客户编号排序。
--    请用一条SQL语句实现该查询：

SELECT
	client.c_name, 
	client.c_phone, 
	bank_card.b_number
FROM
	client,
	bank_card
WHERE
	client.c_id = bank_card.b_c_id AND
	bank_card.b_type = '储蓄卡'
ORDER BY
	client.c_id ASC



/*  end  of  your code  */

3.5
-- 5) 查询理财产品中每份金额在30000～50000之间的理财产品的编号,每份金额，理财年限，并按照金额升序排序，金额相同的按照理财年限降序排序。
--    请用一条SQL语句实现该查询：
SELECT
	finances_product.p_id,
	finances_product.p_amount, 
	finances_product.p_year
FROM
	finances_product
WHERE
	finances_product.p_amount BETWEEN 30000 AND 50000
ORDER BY
	finances_product.p_amount ASC, 
	finances_product.p_year DESC



/*  end  of  your code  */

3.6
-- 6) 查询资产表中所有资产记录里商品收益的众数和它出现的次数。
--    请用一条SQL语句实现该查询：

SELECT
	property.pro_income, 
	COUNT(property.pro_income) AS presence
FROM
	property
GROUP BY
	property.pro_income
HAVING
  presence = (SELECT MAX(presence) FROM (SELECT COUNT(property.pro_income) AS presence FROM property GROUP BY property.pro_income) AS tmp )




/*  end  of  your code  */

3.7
-- 7) 查询身份证隶属武汉市没有买过任何理财产品的客户的名称、电话号、邮箱。
--    请用一条SQL语句实现该查询：

SELECT 
	client.c_name, 
	client.c_phone, 
	client.c_mail
FROM
	client
WHERE
	client.c_id_card LIKE '4201%' AND
	NOT EXISTS(SELECT property.pro_type
   FROM 
	   property,
		 client client2
   WHERE  
	   property.pro_type=1 AND
	   property.pro_c_id=client2.c_id AND
	   client2.c_id=client.c_id)
ORDER BY
	client.c_id



/*  end  of  your code  */

3.8
-- 8) 查询持有两张(含）以上信用卡的用户的名称、身份证号、手机号。
--    请用一条SQL语句实现该查询：


SELECT
	client.c_name, 
	client.c_id_card, 
	client.c_phone
FROM
	client,
	(
		SELECT
			COUNT(bank_card.b_c_id) AS times, 
			bank_card.b_c_id
		FROM
			bank_card
		WHERE
			bank_card.b_type = '信用卡'
		GROUP BY
			bank_card.b_c_id
		HAVING
			times>= 2
	) AS client2
WHERE
	client.c_id = client2.b_c_id
ORDER BY
	client.c_id



/*  end  of  your code  */

3.9
-- 9) 查询购买了货币型(f_type='货币型')基金的用户的名称、电话号、邮箱。
--   请用一条SQL语句实现该查询：



SELECT
	client.c_name, 
	client.c_phone, 
	client.c_mail
FROM
	client
WHERE
	client.c_id IN
	( SELECT 
	client.c_id 
	FROM 
	client, property, fund 
	WHERE 
	client.c_id = property.pro_c_id AND 
	property.pro_type = 3 AND property.pro_pif_id = fund.f_id AND 
	fund.f_type = '货币型' ) 
ORDER BY
	client.c_id ASC


/*  end  of  your code  */

3.10
-- 10) 查询当前总的可用资产收益(被冻结的资产除外)前三名的客户的名称、身份证号及其总收益，按收益降序输出，总收益命名为total_income。不考虑并列排名情形。
--    请用一条SQL语句实现该查询：

SELECT
	client.c_name, 
	client.c_id_card, 
	tmp.total_income
FROM
	client,
	(
		SELECT
			SUM(property.pro_income) AS total_income,
			property.pro_c_id AS c_id
		FROM
			property
		WHERE
			property.pro_status <> '冻结'
		GROUP BY
			property.pro_c_id
	) AS tmp
WHERE
  client.c_id=tmp.c_id
ORDER BY
	tmp.total_income DESC
LIMIT 3








/*  end  of  your code  */ 

3.11
-- 11) 给出黄姓用户的编号、名称、办理的银行卡的数量(没有办卡的卡数量计为0),持卡数量命名为number_of_cards,
--     按办理银行卡数量降序输出,持卡数量相同的,依客户编号排序。
-- 请用一条SQL语句实现该查询：



SELECT
	client.c_id, 
	client.c_name, 
	COUNT(bank_card.b_c_id) AS number_of_cards
FROM
	client
	LEFT JOIN
	bank_card
	ON 
		client.c_id = bank_card.b_c_id
WHERE
	client.c_name LIKE '黄%'
GROUP BY
	bank_card.b_c_id, 
	client.c_id
ORDER BY
	number_of_cards DESC, 
	client.c_id ASC








/*  end  of  your code  */ 

3.12
 -- 12) 综合客户表(client)、资产表(property)、理财产品表(finances_product)、保险表(insurance)和
 --     基金表(fund)，列出客户的名称、身份证号以及投资总金额（即投资本金，
 --     每笔投资金额=商品数量*该产品每份金额)，注意投资金额按类型需要查询不同的表，
 --     投资总金额是客户购买的各类资产(理财,保险,基金)投资金额的总和，总金额命名为total_amount。
 --     查询结果按总金额降序排序。
 -- 请用一条SQL语句实现该查询：

SELECT
	client.c_name, 
	client.c_id_card, 
	COALESCE(finances.finances_amount, 0)+COALESCE(insure.insurance_amount, 0)+COALESCE(fundation.fund_amount,0) AS total_amount
FROM
	client
	LEFT JOIN
	(
		SELECT
			property.pro_c_id, 
			SUM(property.pro_quantity*finances_product.p_amount) AS finances_amount
		FROM
			property
			INNER JOIN
			finances_product
			ON 
				property.pro_pif_id = finances_product.p_id AND
				property.pro_type = 1
		GROUP BY
			property.pro_c_id
	) AS finances
	ON 
		client.c_id = finances.pro_c_id
	LEFT JOIN
	(
		SELECT
			property.pro_c_id, 
			SUM(property.pro_quantity*insurance.i_amount) AS insurance_amount
		FROM
			property
			INNER JOIN
			insurance
			ON 
				property.pro_pif_id = insurance.i_id AND
				property.pro_type = 2
		GROUP BY
			property.pro_c_id
	) AS insure
	ON 
		client.c_id = insure.pro_c_id
	LEFT JOIN
	(
		SELECT
			property.pro_c_id, 
			SUM(property.pro_quantity*fund.f_amount) AS fund_amount
		FROM
			property
			INNER JOIN
			fund
			ON 
				property.pro_pif_id = fund.f_id AND
				property.pro_type = 3
		GROUP BY
			property.pro_c_id
	) AS fundation
	ON 
		client.c_id = fundation.pro_c_id
GROUP BY
	client.c_id, 
	finances.pro_c_id, 
	insure.pro_c_id, 
	fundation.pro_c_id
ORDER BY
	total_amount DESC, 
	client.c_id ASC


/*  end  of  your code  */ 

3.13
跳过

3.14
-- 14) 查询每份保险金额第4高保险产品的编号和保险金额。
--     在数字序列8000,8000,7000,7000,6000中，
--     两个8000均为第1高，两个7000均为第2高,6000为第3高。
-- 请用一条SQL语句实现该查询：


SELECT
	insurance.i_id,
	insurance.i_amount
FROM
	insurance,
	(
		SELECT DISTINCT
			insurance.i_amount
		FROM
			insurance
		ORDER BY
			insurance.i_amount DESC
		LIMIT 3, 1
	) AS tmp
WHERE
	insurance.i_amount = tmp.i_amount





/*  end  of  your code  */ 

3.15
-- 15) 查询资产表中客户编号，客户基金投资总收益,基金投资总收益的排名(从高到低排名)。
--     总收益相同时名次亦相同(即并列名次)。总收益命名为total_revenue, 名次命名为rank。
--     第一条SQL语句实现全局名次不连续的排名，
--     第二条SQL语句实现全局名次连续的排名。

-- (1) 基金总收益排名(名次不连续)
SELECT
	client.c_id pro_c_id, 
	tmp.total_revenue,
	RANK() OVER(ORDER BY tmp.total_revenue DESC) AS "rank"
FROM
	client
	INNER JOIN
	(
		SELECT
			SUM(property.pro_income) AS total_revenue, 
			property.pro_c_id
		FROM
			property
		WHERE
			property.pro_type = 3
		GROUP BY
			property.pro_c_id
	) AS tmp
	ON 
		client.c_id = tmp.pro_c_id
	ORDER BY tmp.total_revenue DESC ,client.c_id ASC;

-- (2) 基金总收益排名(名次连续)

SELECT
	client.c_id pro_c_id, 
	tmp.total_revenue,
	DENSE_RANK() OVER(ORDER BY tmp.total_revenue DESC) AS "rank"
FROM
	client
	INNER JOIN
	(
		SELECT
			SUM(property.pro_income) AS total_revenue, 
			property.pro_c_id
		FROM
			property
		WHERE
			property.pro_type = 3
		GROUP BY
			property.pro_c_id
	) AS tmp
	ON 
		client.c_id = tmp.pro_c_id
	ORDER BY tmp.total_revenue DESC ,client.c_id ASC


/*  end  of  your code  */

3.16
跳过

3.17
跳过

3.18
 -- 18) 查询至少有一张信用卡余额超过5000元的客户编号，以及该客户持有的信用卡总余额，总余额命名为credit_card_amount。
--    请用一条SQL语句实现该查询：


SELECT
	bank_card.b_c_id, 
	SUM(bank_card.b_balance) AS credit_card_amount
FROM
	bank_card
WHERE
	bank_card.b_type = '信用卡' AND
	EXISTS(
		SELECT
	tmp.b_balance
FROM
	bank_card AS tmp
WHERE
	tmp.b_balance > 5000 AND
	tmp.b_c_id = bank_card.b_c_id AND
	tmp.b_type = '信用卡'
	)
GROUP BY
	bank_card.b_c_id
ORDER BY
	bank_card.b_c_id ASC




/*  end  of  your code  */

3.19
跳过





